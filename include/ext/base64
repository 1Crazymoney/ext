/**
 * @file base64
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements base64 class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once
#ifndef _EXT_BASE64_
#define _EXT_BASE64_

#include <cstdint>
#include <stdexcept>
#include <string>

namespace ext {
namespace encoding {
class base64 {
public:
  template <typename T> static std::basic_string<T> encode(const T *data) {
    return encode(std::basic_string<T>(data));
  }

  template <typename T>
  static std::basic_string<T> encode(const std::basic_string<T> &data) {
    static const char sEncodingTable[] = {
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'};

    size_t in_len = data.size();
    size_t out_len = 4 * ((in_len + 2) / 3);
    std::basic_string<T> ret(out_len, (T)'\0');
    size_t i;
    T *p = const_cast<T *>(ret.c_str());

    for (i = 0; i < in_len - 2; i += 3) {
      *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
      *p++ = sEncodingTable[((data[i] & 0x3) << 4) |
                            ((int)(data[i + 1] & 0xF0) >> 4)];
      *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2) |
                            ((int)(data[i + 2] & 0xC0) >> 6)];
      *p++ = sEncodingTable[data[i + 2] & 0x3F];
    }
    if (i < in_len) {
      *p++ = sEncodingTable[(data[i] >> 2) & 0x3F];
      if (i == (in_len - 1)) {
        *p++ = sEncodingTable[((data[i] & 0x3) << 4)];
        *p++ = (T)'=';
      } else {
        *p++ = sEncodingTable[((data[i] & 0x3) << 4) |
                              ((int)(data[i + 1] & 0xF0) >> 4)];
        *p++ = sEncodingTable[((data[i + 1] & 0xF) << 2)];
      }
      *p++ = (T)'=';
    }

    return ret;
  }

  template <typename T> static std::basic_string<T> decode(const T *data) {
    return decode(std::basic_string<T>(data));
  }

  template <typename T>
  static std::basic_string<T> decode(const std::basic_string<T> &data) {
    static const unsigned char kDecodingTable[] = {
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63, 52, 53, 54, 55, 56, 57,
        58, 59, 60, 61, 64, 64, 64, 64, 64, 64, 64, 0,  1,  2,  3,  4,  5,  6,
        7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 64, 64, 64, 64, 64, 64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
        37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
        64, 64, 64, 64};

    size_t in_len = data.size();
    if (in_len % 4 != 0)
      throw std::runtime_error("data data size is not a multiple of 4");

    size_t out_len = in_len / 4 * 3;
    if (data[in_len - 1] == '=')
      out_len--;
    if (data[in_len - 2] == '=')
      out_len--;

    std::basic_string<T> out(out_len, T());

    for (size_t i = 0, j = 0; i < in_len;) {
      uint32_t a = data[i] == '=' ? 0 & i++
                                  : kDecodingTable[static_cast<int>(data[i++])];
      uint32_t b = data[i] == '=' ? 0 & i++
                                  : kDecodingTable[static_cast<int>(data[i++])];
      uint32_t c = data[i] == '=' ? 0 & i++
                                  : kDecodingTable[static_cast<int>(data[i++])];
      uint32_t d = data[i] == '=' ? 0 & i++
                                  : kDecodingTable[static_cast<int>(data[i++])];

      uint32_t triple =
          (a << 3 * 6) + (b << 2 * 6) + (c << 1 * 6) + (d << 0 * 6);

      if (j < out_len)
        out[j++] = (triple >> 2 * 8) & 0xFF;
      if (j < out_len)
        out[j++] = (triple >> 1 * 8) & 0xFF;
      if (j < out_len)
        out[j++] = (triple >> 0 * 8) & 0xFF;
    }

    return std::move(out);
  }
};
} // namespace encoding
using namespace encoding;
} // namespace ext
#endif // _EXT_BASE64_