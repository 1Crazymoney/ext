/**
 * @file pipe
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements pipe class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#ifndef _EXT_PIPE_
#define _EXT_PIPE_

#include "pstream"

#if defined(__GLIBCXX__)
#include <unistd.h>
#if defined(_WIN32)
#include <fcntl.h>
#endif
#else
#if defined(_WIN32)
#include <Windows.h>
#else
#include <unistd.h>
#endif
#endif

namespace ext {
template <typename T = char> class basic_pipe {
public:
  typedef T value_type;

  typedef pstream<std::ios::in | std::ios::binary, std::basic_istream<T>>
      ipstream;
  typedef pstream<std::ios::out | std::ios::binary, std::basic_ostream<T>>
      opstream;

  basic_pipe() {
#if defined(__GLIBCXX__) && defined(_WIN32)
    int child[2];
    if (::_pipe(child, 1024 * 1024, O_BINARY) == -1)
      throw std::runtime_error("Failed to pipe");

    in_ = ipstream(child[0]);
    out_ = opstream(child[1]);
#elif defined(_WIN32)
    SECURITY_ATTRIBUTES sa;
    sa.nLength = sizeof(SECURITY_ATTRIBUTES);
    sa.bInheritHandle = TRUE;
    sa.lpSecurityDescriptor = NULL;

    HANDLE read;
    HANDLE write;
    if (CreatePipe(&read, &write, &sa, 0) != TRUE)
      throw std::runtime_error("Failed to CreatePipe");
#ifdef __cpp_rvalue_references
    in_ = ipstream(read);
    out_ = opstream(write);
#else
    in_.swap(ipstream(read));
    out_.swap(opstream(write));
#endif
#else
    int child[2];
    if (::pipe(child) == -1)
      throw std::runtime_error("Failed to pipe");

    in_ = ipstream(child[0]);
    out_ = opstream(child[1]);
#endif
  }

  ~basic_pipe() {
    in_.close();
    out_.close();
  }

  ipstream &in() { return in_; }
  opstream &out() { return out_; }

private:
  ipstream in_;
  opstream out_;
};

typedef basic_pipe<char> pipe;
typedef basic_pipe<wchar_t> wpipe;
} // namespace ext
#endif // _EXT_PIPE_