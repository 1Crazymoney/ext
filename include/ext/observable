/**
 * @file observable
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This Module implements observable template class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once
#ifndef _EXT_OBSERVABLE_
#define _EXT_OBSERVABLE_

#ifdef CXX_USE_BOOST
#define CXX_USE_STD_MUTEX
#include <boost/thread/mutex.hpp>
#endif

#define CXX_USE_STD_MAKE_UNIQUE
#include "stl_compat"

#ifndef _EXT_STD_MUTEX_
#include <mutex>
#endif

#include <list>

#ifdef CXX_SHARED_MUTEX
#include <shared_mutex>
#endif

// Define a "observable" arguments
#if defined(__cpp_variadic_templates)
#define __TYPE_NAME__OBSERVABLE_ARGS__ typename... Args
#define __OBSERVABLE_ARGS__ args...
#define __OBSERVABLE_ARGS_DECLARATION__ Args... args
#else
#define __TYPE_NAME__OBSERVABLE_ARGS__ typename Arg
#define __OBSERVABLE_ARGS__ arg
#define __OBSERVABLE_ARGS_DECLARATION__ Arg arg
#endif

// Define shared mutex to use in 'observable' class
#if defined(_EXT_SHARED_RECURSIVE_MUTEX_)
#define __OBSERVABLE_SHARED_MUTEX__ ext::shared_recursive_mutex
#elif defined(CXX_SHARED_MUTEX)
#define __OBSERVABLE_SHARED_MUTEX__ CXX_SHARED_MUTEX
#define _EXT_OBSERVABLE_SYNC_
#endif

namespace ext {
/**
 * @brief observable class
 *
 * @tparam T
 * @tparam Args
 */
template <typename T, __TYPE_NAME__OBSERVABLE_ARGS__> class observable {
public:
  class observer {
    friend class observable;

  private:
    /**
     * @brief
     *
     * @tparam Args
     */
    virtual void update(T &, __OBSERVABLE_ARGS_DECLARATION__) = 0;

  public:
    ~observer() { unsubscribe(); }

    /**
     * @brief
     *
     * @param observable
     */
    void operator+=(observable &observable) { subscribe(observable); }

    /**
     * @brief
     *
     * @param observable
     */
    void operator-=(observable &observable) { unsubscribe(observable); }

    /**
     * @brief
     *
     * @param observable
     * @return true
     * @return false
     */
    bool subscribe(observable &observable) {
#ifdef __OBSERVABLE_SHARED_MUTEX__
      std::unique_lock<__OBSERVABLE_SHARED_MUTEX__> lk(
          observable::global_lock_());
#endif
      observables_.push_back(&observable);
      observables_.sort();
      observables_.unique();
      observable.observers_.push_back(this);
      observable.observers_.sort();
      observable.observers_.unique();
      return true;
    }

    /**
     * @brief
     *
     * @param observable
     */
    void unsubscribe(observable &observable) {
#ifdef __OBSERVABLE_SHARED_MUTEX__
      std::unique_lock<__OBSERVABLE_SHARED_MUTEX__> lk(
          observable::global_lock_());
#endif
      observables_.remove(&observable);
      observable.observers_.remove(this);
    }

    /**
     * @brief
     *
     */
    void unsubscribe() {
#ifdef __OBSERVABLE_SHARED_MUTEX__
      std::unique_lock<__OBSERVABLE_SHARED_MUTEX__> lk(
          observable::global_lock_());
#endif
      CXX_FOR(observable * observable, observables_)
        observable->observers_.remove(this);
      observables_.clear();
    }

  private:
    std::list<observable *> observables_;
  };

public:
  ~observable() {
#ifdef __OBSERVABLE_SHARED_MUTEX__
    std::unique_lock<__OBSERVABLE_SHARED_MUTEX__> lk(
        observable::global_lock_());
#endif
    CXX_FOR(observer * observer, observers_)
      observer->observables_.remove(this);
  } // namespace ext

protected:
  /**
   * @brief
   *
   */
  void notify(__OBSERVABLE_ARGS_DECLARATION__) {
#ifdef __OBSERVABLE_SHARED_MUTEX__
    std::shared_lock<__OBSERVABLE_SHARED_MUTEX__> lk(
        observable::global_lock_());
#endif
    CXX_FOR(observer * observer, observers_)
      observer->update(static_cast<T &>(*this), __OBSERVABLE_ARGS__);
  }

private:
  std::list<observer *> observers_;

#ifdef __OBSERVABLE_SHARED_MUTEX__
protected:
  /**
   * @brief
   *
   * @return __OBSERVABLE_SHARED_MUTEX__&
   */
  static __OBSERVABLE_SHARED_MUTEX__ &global_lock_() {
    static __OBSERVABLE_SHARED_MUTEX__ mtx_;
    return mtx_;
  }
#endif
};

} // namespace ext
#endif // _EXT_OBSERVABLE_