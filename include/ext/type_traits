/**
 * @file type_traits
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This Module implements type traits helper features.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */

#pragma once
#ifndef _EXT_TYPE_TRAITS_
#define _EXT_TYPE_TRAITS_

#include "stl_compat"

#include <type_traits>

namespace ext {

#if CXX_VER <= 201703L
template <class T> struct remove_cvref {
  typedef std::remove_cv_t<std::remove_reference_t<T>> type;
};

template <class T> using remove_cvref_t = typename remove_cvref<T>::type;
#endif

template <typename T> struct remove_class;

template <typename R, typename C, typename... Args>
struct remove_class<R (C::*)(Args...) const> {
  using type = R(Args...);
};

template <typename R, typename C, typename... Args>
struct remove_class<R (C::*)(Args...)> {
  using type = R(Args...);
};

#if CXX_VER >= 201703L
template <typename T, class = void> struct deduce_mem_fn {};

template <typename T>
struct deduce_mem_fn<T, std::void_t<decltype(&T::operator())>> {
  using type = typename remove_class<decltype(&T::operator())>::type;
};
#else
template <typename T> struct deduce_mem_fn {
  using type = typename remove_class<decltype(&T::operator())>::type;
};
#endif
} // namespace ext
#endif // _EXT_TYPE_TRAITS_
