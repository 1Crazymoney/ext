/**
 * @file result
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements result class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#define CXX_USE_NULLPTR
#include "stl_compat"

#ifndef _EXT_RESULT_
#define _EXT_RESULT_

#include <stdexcept>
#include <string>

namespace ext {
template <typename T> struct ok;

template <> struct ok<void> {
  ok() {}
};

template <typename T> struct ok {
  ok() {}
  ok(T value) : value(value) {}
  operator T() const { return value; }
  T value;
};

class result_error : public std::runtime_error {
public:
  result_error(const std::string &message) : std::runtime_error(message) {}
};

class no_error_occurred : public result_error {
public:
  no_error_occurred() : result_error("No error occurred.") {}
};

class error_occurred : public result_error {
public:
  error_occurred() : result_error("Error occurred.") {}
  error_occurred(const std::string &message) : result_error(message) {}
};

template <typename T> struct err : result_error {
  err() : result_error(no_error_occurred()) {}
  explicit err(T value) : value(value), result_error(error_occurred("error")) {}
  explicit err(T value, const std::string &message)
      : value(value), result_error(error_occurred(message)) {}
  operator T() const { return value; }
  T value;
};

template <typename T, typename E> class result {
public:
  result(ok<T> ok) : succeed_(true), ok_(ok) {}

  result(err<E> error) : succeed_(false), err_(error) {}

  operator bool() const { return succeed_; }

  const ext::ok<T> &get() const {
    if (succeed_)
      return ok_;
    throw error_occurred(err_.what());
  }

  const ext::err<E> &error() const {
    if (succeed_)
      throw no_error_occurred();
    return err_;
  }

private:
  ext::ok<T> ok_;
  ext::err<E> err_;
  bool succeed_;
};

template <typename E> class void_result {
public:
  void_result(ok<void>) : succeed_(true) {}

  void_result(err<E> error) : succeed_(false), err_(error) {}

  operator bool() const { return succeed_; }

  const ext::err<E> &error() const { return err_; }

private:
  ext::err<E> err_;
  bool succeed_;
};
} // namespace ext
#endif // _EXT_RESULT_
